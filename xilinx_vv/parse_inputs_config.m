
function parse_inputs_config(this_block)

  % Revision History:
  %
  %   10-Mar-2019  (22:11 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/seba/Documents/Untitled_Folder/docs/IRIG/models/prototype1/parse_inputs.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('parse_inputs');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('hard_rst');
  this_block.addSimulinkInport('rst');
  this_block.addSimulinkInport('gpio');
  this_block.addSimulinkInport('cal');
  this_block.addSimulinkInport('in_frame');
  this_block.addSimulinkInport('terminate');
  this_block.addSimulinkInport('cont');
  this_block.addSimulinkInport('reg_wait');

  this_block.addSimulinkOutport('en_ind');
  this_block.addSimulinkOutport('rst_ind');
  this_block.addSimulinkOutport('data_ready');
  this_block.addSimulinkOutport('en_cbh');
  this_block.addSimulinkOutport('rst_cbh');
  this_block.addSimulinkOutport('state_out');

  en_ind_port = this_block.port('en_ind');
  en_ind_port.setType('UFix_1_0');
  en_ind_port.useHDLVector(false);
  rst_ind_port = this_block.port('rst_ind');
  rst_ind_port.setType('UFix_1_0');
  rst_ind_port.useHDLVector(false);
  data_ready_port = this_block.port('data_ready');
  data_ready_port.setType('UFix_1_0');
  data_ready_port.useHDLVector(false);
  en_cbh_port = this_block.port('en_cbh');
  en_cbh_port.setType('UFix_1_0');
  en_cbh_port.useHDLVector(false);
  rst_cbh_port = this_block.port('rst_cbh');
  rst_cbh_port.setType('UFix_1_0');
  rst_cbh_port.useHDLVector(false);
  state_out_port = this_block.port('state_out');
  state_out_port.setType('UFix_4_0');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('hard_rst').width ~= 1);
      this_block.setError('Input data type for port "hard_rst" must have width=1.');
    end

    this_block.port('hard_rst').useHDLVector(false);

    if (this_block.port('rst').width ~= 1);
      this_block.setError('Input data type for port "rst" must have width=1.');
    end

    this_block.port('rst').useHDLVector(false);

    if (this_block.port('gpio').width ~= 1);
      this_block.setError('Input data type for port "gpio" must have width=1.');
    end

    this_block.port('gpio').useHDLVector(false);

    if (this_block.port('cal').width ~= 1);
      this_block.setError('Input data type for port "cal" must have width=1.');
    end

    this_block.port('cal').useHDLVector(false);

    if (this_block.port('in_frame').width ~= 1);
      this_block.setError('Input data type for port "in_frame" must have width=1.');
    end

    this_block.port('in_frame').useHDLVector(false);

    if (this_block.port('terminate').width ~= 1);
      this_block.setError('Input data type for port "terminate" must have width=1.');
    end

    this_block.port('terminate').useHDLVector(false);

    if (this_block.port('cont').width ~= 1);
      this_block.setError('Input data type for port "cont" must have width=1.');
    end

    this_block.port('cont').useHDLVector(false);

    if (this_block.port('reg_wait').width ~= 32);
      this_block.setError('Input data type for port "reg_wait" must have width=32.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('start','integer','11');
  this_block.addGeneric('a','integer','10');
  this_block.addGeneric('b','integer','2');
  this_block.addGeneric('c','integer','0');
  this_block.addGeneric('d','integer','13');
  this_block.addGeneric('e','integer','15');
  this_block.addGeneric('f','integer','14');
  this_block.addGeneric('g','integer','8');
  this_block.addGeneric('h','integer','5');
  this_block.addGeneric('i','integer','12');
  this_block.addGeneric('j','integer','1');
  this_block.addGeneric('k','integer','9');
  this_block.addGeneric('l','integer','4');
  this_block.addGeneric('m','integer','6');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('parse_inputs.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

