
function fsm_frac_sec_config(this_block)

  % Revision History:
  %
  %   19-Mar-2019  (10:26 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/seba/Documents/Untitled_Folder/scripts/vector_voltmeter/models/prototype1_sim_only/fsm_frac.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('fsm_frac_sec');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('hard_rst');
  this_block.addSimulinkInport('gpio');
  this_block.addSimulinkInport('threshold');
  this_block.addSimulinkInport('waiting');

  this_block.addSimulinkOutport('new_count');
  this_block.addSimulinkOutport('state');

  new_count_port = this_block.port('new_count');
  new_count_port.setType('UFix_1_0');
  new_count_port.useHDLVector(false);
  state_port = this_block.port('state');
  state_port.setType('UFix_3_0');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('hard_rst').width ~= 1);
      this_block.setError('Input data type for port "hard_rst" must have width=1.');
    end

    this_block.port('hard_rst').useHDLVector(false);

    if (this_block.port('gpio').width ~= 1);
      this_block.setError('Input data type for port "gpio" must have width=1.');
    end

    this_block.port('gpio').useHDLVector(false);

    if (this_block.port('threshold').width ~= 32);
      this_block.setError('Input data type for port "threshold" must have width=32.');
    end

    if (this_block.port('waiting').width ~= 32);
      this_block.setError('Input data type for port "waiting" must have width=32.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('start','integer','0');
  this_block.addGeneric('a','integer','4');
  this_block.addGeneric('b','integer','5');
  this_block.addGeneric('c','integer','1');
  this_block.addGeneric('d','integer','3');
  this_block.addGeneric('e','integer','7');
  this_block.addGeneric('f','integer','6');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('fsm_frac.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

